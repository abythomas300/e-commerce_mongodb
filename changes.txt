// creating a new database
use mongoShopDB

// creation and validation of 'users' collection
db.users.createCollection({'users'},{
    validator: {
            $jsonSchema: {
              bsonType: 'object',
              title: 'User Object Validation',
              required: [
                'name',
                'email',
                'password',
                'phone_number',
                'address'
              ],
              properties: {
                name: {
                  bsonType: 'string',
                  description: 'name must be a string and is required.'
                },
                email: {
                  bsonType: 'string',
                  description: 'email must be a string and is required.'
                },
                password: {
                  bsonType: 'string',
                  minLength: 8,
                  description: 'password is required and must be atleast 8 characters long.'
                },
                phone_number: {
                  bsonType: 'string',
                  description: 'phone number is required.'
                },
                address: {
                  bsonType: 'object',
                  properties: {
                    house_name: {
                      bsonType: 'string'
                    },
                    street: {
                      bsonType: 'string'
                    },
                    city: {
                      bsonType: 'string'
                    },
                    district: {
                      bsonType: 'string'
                    },
                    pin_code: {
                      bsonType: 'int',
                      description: 'pin code must be a number.'
                    }
                  }
                },
                dob: {
                  bsonType: 'date',
                  description: 'date of birth must be entered in standard ISO format.'
                }
              }
            }
        }
    }
)

//creation and validation for 'products' collection
db.createCollection('products', {
  validator: {
    $jsonSchema: {
      // validation rules for the entire collection
      bsonType: 'object',
      description: 'Validation for Products Collection',
      required: ['name', 'price', 'category'],
      properties: {
        //validation rules for each fields
        name: {
          bsonType: 'string',
          description: 'product name must be a string.'
        },
        price: {
          bsonType: ['double', 'int'],
          description: 'price must be a decimal value.'
        },
        category:{
          bsonType: 'objectId',
          description: 'category id must be referenced from the category collection.'
        }
      }
    }
  }
})

// creation and validation for 'categories' collection
db.createCollection('categories',{
  validator: {
    $jsonSchema: {
      // validation rules for the entire collection
      bsonType: 'object',
      description: 'Validation for Category Collection',
      required: ['category_name'],
      // validation rules for each fields
      properties: {
        category_name: {
        bsonType: 'string',
        description: 'category name should be a string and is required'
      }
      }
    }
  }
})

//creation and validation for 'orders' collection
db.createCollection('orders', {
  validator: {
    {
  $jsonSchema: {
    bsonType: 'object',
    description: 'Validation for Order Collection',
    required: [
      'ordered_by',
      'order_date'
    ],
    properties: {
      ordered_by: {
        bsonType: 'objectId',
        description: 'ordered_by is required and should have reference id to users collection'
      },
      order_date: {
        bsonType: 'date',
        description: 'date is requried and should be entered in standard format'
      }
    }
  }
}
  }
})

//creation and validation for 'cart' collection
db.createCollection('cart', {
  validator: {
  $jsonSchema: {
    bsonType: 'object',
    description: 'Validation for Cart Collection',
    required: [
      'owner',
      'products'
    ],
    properties: {
      owner: {
        bsonType: 'objectId',
        description: 'owner field is required and should have a reference from users collection.'
      },
      products: {
        bsonType: 'array',
        description: 'products is required and can have more than 1 objectId referencing to products collection.',
        items: {
          bsonType: 'objectId',
          description: 'orderId should have atleast one refernce to products collection.'
        }
      }
    }
  }
}
})

//creation and validation for 'review' collection
db.createCollection('reviews',{
  validator: {
    $jsonSchema: {
      bsonType: 'object',
      description: 'Validation for reviews collection',
      required: ['user', 'review','product'],
      properties:{
        user: {
          bsonType: 'objectId',
          description: 'required and should have reference to users collection'
        },
        review: {
          bsonType: 'string',
          description: 'required and should be in string format'
        },
        stars: {
          bsonType: 'int',
          maximum:5,
          description: 'only allowed upto 5 starts'
        },
        product: {
          bsonType: 'objectId',
          description: 'required and should have reference to products collection'
        }
      }
    }
  }
})

// Get all orders with product details using $lookup
db.orders.aggregate([
  {
    $lookup: {
      from: 'products',
      localField: 'products',
      foreignField: '_id',
      as: 'Products Details'
    }
  }
])

// Get user details along with their reviews
db.reviews.aggregate([
  {
    $lookup: {
      from: 'users',
      localField: 'user',
      foreignField: '_id',
      as: 'User Details'
    }
  }
])

//Get all products along with their category info
db.products.aggregate([
  {
    $lookup: {
      from: 'categories',
      localField: 'category',
      foreignField: '_id',
      as: 'Category Details'
    }
  }
])

// Average product rating (with all details of each product)
db.reviews.aggregate([
  {
    //stage 1: Grouping all products + average rating of each
    $group: {
      _id: '$product',
      Average_Rating: { $avg: '$stars' }
    }
  },
  {
    //stage 2: Displaying product information
    $lookup: {
      from: 'products',
      localField: '_id', //<--- _id of the 'reviews' collection from the output of the previous stage
      foreignField: '_id', //<--- _id of the products collection (The Reference)
      as: 'Product Details'
    }
  }
])

// Top 3 highest rated products (with the product details)
db.reviews.aggregate([
  {
    $sort: {
      stars: -1  //<-- stage to get the documents sorted in descending order of the stars(rating)
    }
  },
  {
    $limit: 3  //<-- stage to limit the results by the first 3 documents
  },
  {
    $lookup: {
      from: 'products',
      localField: 'product',
      foreignField: '_id',
      as: 'Product Details'
    }
  }
])

// Total number of orders placed by each user (with user details)
db.orders.aggregate([
  {
    $group: {
      _id: '$ordered_by',
      "Total orders by this Person": {$count:{}}  //<-- counts the number of documents(orders) in each user
    }
  },
  {
    $lookup: {
      from: 'users',
      localField: '_id',
      foreignField: '_id',
      as: "User Details"
    }
  }
])

// Total Sales per product
db.orders.aggregate([
  {
    $unwind: '$products'  // <---- products are initially in a array so difficult to group each, so changing them to a normal object format using $unwind(Creates n copies of the same initial document each with respective product elements)
  },
  {
    $group: {
      _id: '$products',  // <---- grouping based on each products
      "Number of orders": {$count:{}}  // <--- counting number of orders of each product by counting the number of documents under each prodcutId 
    }
  },
  {
    $lookup: {         // <---- displaying details of each products 
      from: 'products',
      localField: '_id',
      foreignField: '_id',
      as: "Product Details"
    }
  },
  {
    $unwind: '$Product Details'  // <---- unwinding the product details (which was in a array initially) so that each elements inside it can be accessed using the dot (.) operator
  },
  {
    $project: {
      'Number of orders': 1,  // <--- (inclusion) displaying the number of orders
      'Product Name': '$Product Details.name',  // <--- getting the name of each product using dot operator
      'Product Price': '$Product Details.price', //<--- getting the price of each product using dot operator
      'Total Sales amount': {$multiply:['$Number of orders','$Product Details.price']} //<--- multiplying price and orders of each product to get the sales amount
    }
  }
])

// Total revenue per day
db.orders.aggregate([
  {
    $unwind: '$products'
  },
  {
    $lookup: {
      from: 'products',
      localField: 'products',
      foreignField: '_id',
      as: "Product Details"
    }
  },
  {
    $unwind: '$Product Details'
  },
  {
    $group: {
      _id: '$order_date',
      "Total Revenue": {$sum:'$Product Details.price'}
    }
  },
  {
    $project: {
      _id:0,
      "Total Revenue": 1,
      // "Day": {$dayOfMonth: '$_id'}, -- picking up only day from ISODate
      // "Month": {$month: '$_id'},  -- picking up only month from ISODate
      // "Year":{$year:'$_id'}, -- picking up only year from ISODate
      "Date": {  // first converting day, month and year into string and then concatenating them with hiphen to get the fomat dd-mm-yyyy
      $concat:[
        { $toString: {$dayOfMonth: '$_id'}  },
        '-',
        { $toString: {$month: '$_id'}  },
        '-',
        {$toString: {$year: '$_id'}}
      ]
    }
    }
  },
    {
      $sort: {
        _id: -1
      }
  }
])

// create index on email field in users collection (single index)
 db.users.createIndex({email:1})

// create index for name in products collection (text index) 
db.products.createIndex({name:'text'})  // <-- products name can now be searched using keywords.. (by using $text and $search operator)

// create index for category in products collection (single index)
db.products.createIndex({category:1}) 

// displaying daily revenue data in another dailySalesSummary collection using $merge
db.orders.aggregate([
  {
    $unwind: '$ordered_products'
  },
  {
    $lookup: {
      from: 'products',
      localField: 'ordered_products',
      foreignField: '_id',
      as: "Product Details"
    }
  },
  {
    $unwind: '$Product Details'
  },
  {
    $group: {
      _id: '$ordered_date',
      'Number of products in this day':{$count:{}},
      'Total revenue on this day':{$sum:'$Product Details.price'},
      'Products ordered in this day': {$push:'$products'},
    }
  },
  {
    $sort: {
      _id: 1  // oldest to latest
    }
  },
    {
      $project: {
        _id: 0,
        "Date": { 
      $concat:[
        { $toString: {$dayOfMonth: '$_id'}  },
        '-',
        { $toString: {$month: '$_id'}  },
        '-',
        {$toString: {$year: '$_id'}}
      ]
    },
       'Number of products in this day': 1,
        'Total revenue on this day': 1,
        'All Products ordered in this day':1   
    }
  },
  {
    $merge: {
     into: 'dailySalesSummary'
  }
}
])